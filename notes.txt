data_cleaning
subset
Subset
<p>While it takes some doing in Stata to work with multiple data sets at once (and most people do not use Stata this way, and it doesn't work in old versions), using multiple datasets at once is standard in R, and <span class="font-semibold">subsetting operations won't overwrite your original dataset</span>. That means you don't need to wrap everything in preserve/restore. However, it also means that you'll need to (re)assign your subsetted data if you want to use it again later. E.g. `dat1 = dat[origin=='LGA']`.</p>

data_cleaning
modify
Modify
<p>In R, any missing (i.e. "NA") values will propagate during aggregating functions. If you have NA values in your real-life dataset — we don't in this example dataset — you probably want to add "na.rm=TRUE" to remove these on the fly. E.g. "mean(var1, na.rm=TRUE)" or "lapply(.SD, mean, na.rm=TRUE)".</p>

data_cleaning
collapse
Collapse
<p>While it takes some doing in Stata to work with multiple data sets at once (and most people do not use Stata this way, and it doesn't work in old versions), using multiple datasets at once is standard in R. That means you don't need to wrap everything in preserve/restore. However, it also means that you'll need to (re)assign your collapsed data if you want to use it again later. E.g. "dat1 = dat[, mean(var1)]". Also remember our earlier note about aggregating functions on columns that have missing values: Use "na.rm=TRUE" to remove these on the fly. E.g. "dat[, mean(var1, na.rm=TRUE)]".</p>

regression
panel
Panel data
<p>Note you don't need to specify panel.vars if you make your data a panel dataset before running the regression using the `panel` function. For example, you can use `panel(dat, ~ id + var)`.

misc
ggplot
Graphing with ggplot2
<p><a href = "https://ggplot2.tidyverse.org/" class="text-[#4c807b] font-semibold underline">ggplot2</a> is considered one of the best graphing packages available today, and not just in R either but across many languages. It provides an intuitive syntax that applies in the same way across many, many different kinds of graphics, and with a deep level of available customization. Plus, endless additional plugins to do what you want (including easy interactivity, animation, maps, etc.). We thought about giving <span class="font-semibold">ggplot2</span> its own page like <span class="font-semibold">data.table</span> and <span class="font-semibold">fixest</span>, but instead we'll point you to the <span class="text-[#4c807b] font-semibold underline"><a  href = "https://lost-stats.github.io/Presentation/Figures/Figures.html">Figures</a></span> section of the Library of Statistical Techniques, which already shows how to do many different graphing tasks in both Stata and <span class="font-semibold">ggplot2</span>. Or for a more in-depth introduction, there are many books available, including Kieran Healy's <span class="text-[#4c807b] font-semibold underline italic"><a href = "https://socviz.co/">Data Visualization</a></span>.

misc
tidyverse
The tidyverse
<p>The <a href = "https://www.tidyverse.org" class="text-[#4c807b] font-semibold underline">tidyverse</a> is one of the most common ways to work with data in R. This package is actually a collection of many smaller packages that are all designed to work together and have a shared syntax (and there are many other packages that aren't included in the <span class="font-semibold">tidyverse</span> package but remain, nevertheless, part of the tidyverse). We've already covered <span class="font-semibold">ggplot2</span> which is an honorary member, but there is plenty more (including <span class="font-semibold">dplyr</span> and <span class="font-semibold">tidyr</span> which offer their own approach to cleaning data, although we still recommend <span class="font-semibold">data.table</span>). Several worth knowing about include <span class="font-semibold">purrr</span>, which contains a suite of functions for automating and looping your work, <span class="font-semibold">lubridate</span> which makes working with date-based data easy, and <span class="font-semibold">stringr</span> which offers functions with straightforward syntax for working with string variables.</p>

misc
car
car and nlWaldTest for joint coefficient tests
<p>One deficiency in R that can be surprising for Stata switchers is the lack of inbuilt, complex postestimation coefficient tests like <span class="font-semibold">testparm</span>, <span class="font-semibold">lincom</span>, and <span class="font-semibold">nlcom</span>. Still, we've already seen that <span class="font-semibold">fixest</span> covers the <span class="font-semibold">testparm</span> equivalent with its <span class="font-semibold">wald()</span> function. But what about combinations of coefficients? <a href = "http://multcomp.r-forge.r-project.org/" class="text-[#4c807b] font-semibold underline">multcomp</a> is a nice package that does both with <span class="font-semibold">glht()</span>, but isn't yet compatible with <span class="font-semibold">fixest</span>. So instead we have the <a href = "https://cran.r-project.org/web/packages/car/" class="text-[#4c807b] font-semibold underline">car</a> package with <span class="font-semibold">linearHypothesis()</span> for tests of linear combinations of coefficients (although not confidence intervals), and <span class="font-semibold">nlWaldTest</span> for nonlinear combinations and confidence intervals.</p>

misc
modelsummary
modelsummary for regression and summary tables
<p>The <span class="font-semibold">fixest</span> package already has the <span class="font-semibold">etable()</span> function for generating regression tables. However, it is only really intended to work with models from the same package. So we also recommend checking out the fantastic <a href = "https://vincentarelbundock.github.io/modelsummary/" class="text-[#4c807b] font-semibold underline">modelsummary</a> package. It works with all sorts of model objects, including those not from <span class="font-semibold">fixest</span>, is incredibly customizable, and outputs to a bunch of different formats (PDF, HTML, DOCX, etc). It also has a <span class="font-semibold">datasummary</span> function which works in similar ways to Stata's <span class="font-semibold">table</span>. How about for summary statistics tables? There's a wealth of options (which is nice; Stata makes exporting summary statistics tables a pain). Oh, and it also supports coefficient plots! Check out the <a href = "https://vincentarelbundock.github.io/modelsummary/" class="text-[#4c807b] font-semibold underline">package website</a> for more.</p>

misc
marginaleffects
marginaleffects for marginal effects
<p>The Stata <span class="font-semibold">margins</span> command is an impressive piece of work! How can you replicate it in R? Well, there's the <a href = "https://vincentarelbundock.github.io/marginaleffects/" class="text-[#4c807b] font-semibold underline">marginaleffects</a> package for that. Individual marginal effects or average marginal effects for nonlinear models, or models with interactions or transformations. Done!</p>

misc
sandwich
sandwich for additional standard error adjustments
<p>The <span class="font-semibold">fixest</span> package comes with plenty of shortcuts for accessing standard-error adjustments like HC1 heteroskedasticity-robust standard errors, Newey-West, Driscoll-Kraay, or clustered standard errors. But there is, of course, more than that! Many additional options are covered by the <a href = "https://sandwich.r-forge.r-project.org/articles/sandwich.html" class="text-[#4c807b] font-semibold underline">sandwich</a> package, which comes with a long list of functions like <span class="font-semibold">vcovBS()</span> for bootstrapped standard errors, or <span class="font-semibold">vcovHAC()</span> for HAc. These can slot right into <span class="font-semibold">fixest</span> estimates, too! You shouldn't be using those ", robust" errors for smaller samples anyway... you knew that right?</p>

misc
lme4
lme4 for random effects and mixed models
<p><span class="font-semibold">fixest</span> can do a lot, but it can't do everything. This site isn't even going to attempt to go into how to translate every single model into R. But we'll cover one class of models: random-effects models with <a href = "https://cran.r-project.org/web/packages/lme4/index.html" class="text-[#4c807b] font-semibold underline">lme4</a> (there's also  <span class="font-semibold">Rstan</span> if that floats your boat, in which case the translation from  <span class="font-semibold">statastan</span> is pretty straightforward).  <span class="font-semibold">lme4</span> and its <span class="font-semibold">lmer()</span> function covers not just random-intercept models but also hierarchical models where slope coefficients follow random distributions.</p>

misc
collapse
collapse for extra convenience functions and super fast aggregations
<p>Sure, we've gone on and on about how fast <span class="font-semibold">data.table</span> is compared to just about everything else. But there is another R package that can boast even faster computation times for certain grouped calculations and transformations, and that's <a href = "https://sebkrantz.github.io/collapse/index.html" class="text-[#4c807b] font-semibold underline">collapse</a>. The <span class="font-semibold">collapse</span> package doesn't try to do everything that <span class="font-semibold">data.table</span> does. But the two <a href="https://sebkrantz.github.io/collapse/articles/collapse_and_data.table.html">play very well together</a> and the former offers some convenience functions like `descr` and `collap`, which essentially mimic the equivalent functions in Stata and might be particularly appealing to readers of this guide. (P.S. If you'd like to load <span class="font-semibold">data.table</span> and <span class="font-semibold">collapse</span> at the same time, plus some other high-performance packages, check out the <a href = "https://sebkrantz.github.io/fastverse/index.html" class="text-[#4c807b] font-semibold underline">fastverse</a>.)</p>
