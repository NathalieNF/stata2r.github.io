Page --- Category --- Example --- stata_code --- r_code
data_cleaning --- Load and Save Data --- Load .csv --- import delimited using "https://raw.githubusercontent.com/Rdatatable/data.tablemaster/vignettes/flights14.csv" clear\nexport delimited using "flightdata.csv" ---  replace', "d = fread('https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv')\nfwrite(d, 'flightdata.csv')"
data_cleaning --- Load and Save Data --- Load .dta --- use "filename.dta" clear\nsave "filename.dta", replace --- # Note: this commandrequires the package `haven` \nd = haven::read_dta('filename.dta')\nhaven::write_dta(d, 'filename.dta')"
data_cleaning --- Filtering Rows/Columns --- Filter rows by logical statement --- drop if month == 1\nkeep if day > 5 & day < 10\nkeep if inrange(day,5,10)\nkeepif origin == "LGA"\nkeep if regex(origin,"LGA")\nkeep if inlist(month,11,12) --- d[!(month == 1 ]\nd[day > 5 & day < 10, ]\nd[between(day,5,10)]\nd[origin == 'LGA', ]\nd[origin %like% 'LGA']\nd[month %in% c(11,12)]
data_cleaning --- Filtering Rows/Columns --- Filter rows by row number --- keep in 1/200 --- d[1:200, ]
data_cleaning --- Filtering Rows/Columns --- Filter out duplicates --- duplicates drop\nduplicates drop year month day carrier, force --- unique(d)\nd[, first(.SD by = .(year, month, day, carrier)]
data_cleaning --- Filtering Rows/Columns --- Ordering Rows --- sort air_time \nsort air_time dest \ngsort -air_time\n\n --- setorder(d, air_time) \nsetorder(d, air_time, dest) \nsetorder(d, -air_time)
data_cleaning --- Filtering Rows/Columns --- Selecting variables --- keep month day carrier \ndrop origin dest\nkeep year-arr_delay\nkeep *_delay --- d[ , .(month, day, carrier)] \nd[, -c('origin', 'dest')] \nd[ , year:arr_delay] \nd[, .SD, .SDcols = patterns('*_delay')]
data_cleaning --- Filtering Rows/Columns --- Ordering Variables --- order month day --- setcolorder(d, c('month','day'))
data_cleaning --- Filtering Rows/Columns --- Renaming variables --- rename arr_delay arrival_delay \nrename (carrier origin) (carrier_codeorigin_code)\nrename arr_* arrival_* --- setnames(d, 'arr_delay', 'arrival_delay')\nsetnames(d,c('carrier','origin'c('carrier_code','origin_code'))\nsetnames(d, names(d)[names(d) %like% 'arr_'], function(x) gsub('arr_','arrival_',x))
data_cleaning --- Generating and Summarizing Variables --- Creating Variables --- gen total_delay = dep_delay + arr_delay \ngen first_letter = substr(origin, 1,1) \ngen flight_path = origin + '_' + dest --- d[ , total_delay := dep_delay + arr_delay] \nd[ , first_letter := substr(origin,1,1)] \nd[, flight_path := paste(origin, dest, sep='_')]
data_cleaning --- Generating and Summarizing Variables --- Manipulating Variables --- replace total_delay = dep_delay + arr_delay \nreplace distance = distance + 1if month == 9\nreplace distance = 0 in 1 --- d[ , total_delay := dep_delay + arr_delay] \nd[month == 9, distance := distance + 1]\nd[1, distance := 0]
data_cleaning --- Generating and Summarizing Variables --- Creating Variables  with Groups --- bysort origin: egen mean_dep_delay = mean(dep_delay) --- d[ , mean_dep_delay := mean(dep_delay by = origin]
data_cleaning --- Generating and Summarizing Variables --- Using Cases --- generate origin_state = "New York" if inlist(origin,"JFK","LGA")\nreplace origin_state = "New Jersey" if origin == "EWR"\ngenerate flight_length = "Long" if air_time > 500 & !missing(air_time)\nreplace flight_length = "Short" if missing(flight_length) & !missing(air_time) --- d[ , origin_state = fcase(origin %chin% c('JFK','LGA'), 'New York', # %chin% is just like %in% from earlier, but faster for strings\n\t\torigin == 'EWR','New Jersey')]\n# fifelse is the base-R ifelse, but (f)aster!\nd[, flight_length := fifelse(air_time > 500, 'Long','Short')]
data_cleaning --- Generating and Summarizing Variables --- Row-wise calculations --- * Pre-packaged row calculations\negen total_delay = rowtotal(*_delay)\n* Customrow calculations\n* ? --- # Pre-packaged row calculations\nd[, total_delay := rowSums(.SD .SDcols = patterns('*_delay')]\n# Custom row calculations\nd[, total_delay := sum(.SD .SDcols = patterns('*_delay' by = 1:nrow(d)]
data_cleaning --- Generating and Summarizing Variables --- Summarizing Variables ---collapse (mean) mean_delay = arr_delay, by(carrier) \ncollapse (min) min_d =distance (max) max_d = distance, by(origin) \negen unique_dest = group(dest by(origin) \ncollapse (max) unique_dest, by(origin) --- d[ , .(mean_delay = mean(arr_delay) by=carrier] \nd[ , .(min_d = min(distance max_d = max(distance) by=origin] \n# This line matches the final two lines on the left:\nd[, .(unique_dest = length(unique(dest)) by=origin]
data_cleaning --- Reshaping and Merging --- Reshaping Long --- * Prepare to reshape long:\ngenerate id = _n\nrename (dep_delay arr_delay)(delay_dep delay_arr)\nreshape long delay_, i(id) j(delay_type) s --- # Prepare to reshape long:\nd[, id := .I]\nmelt(d, measure.vars = c('arr_delay','dep_delay'))\n# note id.vars would normally be specified too, but here we're treating each row as its own ID
data_cleaning --- Reshaping and Merging --- Reshaping Wide --- * This starts with the reshaped-long data from above\nreshape wide delay_, (id) j(delay_type) s --- # This starts with the reshaped-long data from above\ndcast(d, id ~ variable)\n# (this drops all variables except id and *_delay, but we could preserve them\n# with id+origin+dest+etc. instead of just id)
data_cleaning --- Accessing Useful Numbers --- Counting Rows --- count\ncount if month == 10\nbysort carrier: g rows_per_carrier = _N\nbysortcarrier: g index_within_carrier = _n --- nrow(d)\nd[, sum(month == 10)]\nd[, rows_per_carrier := .N, by = carrier]\nd[, index_within_carrier := .I, by = carrier]
data_cleaning --- Accessing Useful Numbers --- Counting Group --- egen origin_index = group(origin) --- d[, origin_index := .GRP, by = origin]
regression --- Formula Creation --- Fixed Effects --- reghdfe y x, absorb(fe) --- feols(y ~ x | fe, data)
regression --- Formula Creation --- Categorical Variables --- reghdfe y x i.cat --- feols(y ~ x + i(cat), data)
regression --- Formula Creation --- With Baseline --- reghdfe y x ib1.cat --- feols(y ~ x + i(cat, ref = 1), data)
regression --- Formula Creation --- Interact Categoricals --- reghdfe y x i.cat#i.cat2 --- feols(y ~ x + i(cat, i.cat2), data)
regression --- Formula Creation --- Categorical and Continuous --- reghdfe y x c.cont#i.cat --- feols(y ~ x + i(cat, cont), data)
regression --- Formula Creation --- Macros --- local vars varlist \n reghdfe y x `vars' --- vars = c(...) \n feols(y ~ x + .[vars], data)
regression --- Formula Creation --- Wildcard --- reghdfe y x age_* --- feols(y ~ x + ..('age_'), data)
regression --- Formula Creation --- Variables v1 ... v4 --- reghdfe y x v1-v4 --- feols(y ~ x + v.[1:4], data)
regression --- Formula Creation --- Regex ---   --- feols(y ~ x + ..('regex_exp'), data)
regression --- Standard Errors --- HC --- reghdfe y x, vce(hc1) --- feols(y ~ x, data, vcov = 'hc1')
regression --- Standard Errors --- HAC --- ivreghdfe y x, bw(2) --- feols(y ~ x, data, vcov = NW(2) ~ id + period)
regression --- Standard Errors --- Cluster --- reghdfe y x, cluster(clust) --- feols(y ~ x, data, vcov = ~clust)
regression --- Standard Errors --- Two-way --- reghdfe y x, cluster(clust1 clust2) --- feols(y ~ x, data, vcov = ~clust1 + clust2)
regression --- Standard Errors --- Conley Standard Errors ---   --- feols(y ~ x, data, vcov = conley('lat', 'lon', 50))
regression --- Postestimation --- Regression Table --- reghdfe ... \n eststore est1 \n estout ... --- est1 = feols(...) \n etable(est1)
regression --- Postestimation --- Coefficient Plot --- reghdfe ... \n eststore est1 \n estout ... --- est1 = feols(...) \n coefplot(est1)
regression --- Panel Data --- Lag Variables --- xtset unit time \n reg y x l1.x l2.x --- panel(df, ~unit + time) \n feols(y ~ x + l(x, 1:2), df)
regression --- Panel Data --- Lead Variables --- xtset unit time \n reg y x f1.x f2.x --- panel(df, ~unit + time) \n feols(y ~ x + l(x, -2:-1), df)
regression --- Panel Data --- First Difference --- xtset unit time \n reg y x D.x --- panel(df, ~unit + time) \n feols(y ~ x + d(x), df)
regression --- Instrumental Variables --- Instrumental Variables --- ivreghdfe 2sls y x (x1 = z1) --- feols(y ~ x | x1 ~ z1, df)
regression --- Instrumental Variables --- with Fixed Effects --- ivreghdfe 2sls y x (x1 = z1), absorb(fe1) --- feols(y ~ x | fe1 | x1 ~ z1, df)
